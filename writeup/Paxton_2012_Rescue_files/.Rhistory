print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", col_name, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", col_name, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", col_name, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", col_name, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", col_name, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_2 <- "CRT_2"
non_numeric_rows <- which(!sapply(clean_data[["CRT_2"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_2, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_2, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
view(clean_data)
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
#### Import data
library(readr)
raw_data <- read_csv("~/Library/CloudStorage/OneDrive-Personal/Academics/Stanford/Courses/Fall_2023/PSYCH_251/paxton2012_rescue/data/Pilot_A/Paxton(2012)_Rescue_Pilot_A.csv")
View(Paxton_2012_Rescue_Pilot_A)
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
view(clean_data)
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2),]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))
}
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c("Start Date",""ImportId":"startDate","timeZone":"America/Denver")]
#### Prepare data for analysis - create columns etc.
# Removes first two roes, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2)]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))
}
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
#### Import data
library(readr)
raw_data <- read_csv("~/Library/CloudStorage/OneDrive-Personal/Academics/Stanford/Courses/Fall_2023/PSYCH_251/paxton2012_rescue/data/Pilot_A/Paxton(2012)_Rescue_Pilot_A.csv")
View(Paxton_2012_Rescue_Pilot_A)
#### Prepare data for analysis - create columns etc.
# Removes first two rows, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2)]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
view(clean_data)
#### Prepare data for analysis - create columns etc.
# Removes first two rows, selects relevant columns, renames columns, replaces numbers with strings for gender variables
raw_data <- raw_data[-c(1,2), ,drop = FALSE]
clean_data  <- raw_data %>%
select(Finished, COM_1, CRT_1, CRT_2, CRT_3, CRT_4, ATT_1, MDA_1, `MDA_2 _1`, MDB_1, `MDB_2 _1`, MDC_1, `MDC_2 _1`, DQ_1, DQ_2, `DQ_2 _3_TEXT`, DQ_3, DQ_4, DQ_5, `DQ_6 _1`, `Duration (in seconds)`, FL_17_DO, FL_18_DO) %>%
rename(crt_order = FL_17_DO, dilemma_order = FL_18_DO, age = DQ_1, gender = DQ_2, income = DQ_3, ethnicity = DQ_4, education = DQ_5, attention_check = ATT_1, duration = 'Duration (in seconds)') %>%
mutate (gender, gender = ifelse(gender == 1, "male", gender)) %>%
mutate(gender, gender = ifelse(gender == 2, "female", gender)) %>%
mutate(gender, gender = ifelse(gender == 3, "other", gender))
view(clean_data)
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
view(clean_data)
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4)) %>%
mutate(CRT_score = CRT_1 + CRT_2 + CRT_3 + CRT_4) %>%
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4)) %>%
mutate(CRT_score = CRT_1 + CRT_2 + CRT_3 + CRT_4)
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))
}
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))}
view(clean_data)
# Creates a new variable for total CRT score and average CRT score, then filters out participants that did not get at least one CRT question correct (CRT_total = 0)
clean_data <- clean_data %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 == 10, 1, CRT_1)) %>%
mutate(CRT_1, CRT_1 = ifelse(CRT_1 !=1, 0, CRT_1)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 == 10, 1, CRT_2)) %>%
mutate(CRT_2, CRT_2 = ifelse(CRT_2 !=1, 0, CRT_2)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 == 25, 1, CRT_3)) %>%
mutate(CRT_3, CRT_3 = ifelse(CRT_3 !=1, 0, CRT_3)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 == 8,1,CRT_4)) %>%
mutate(CRT_4, CRT_4 = ifelse(CRT_4 != 1, 0, CRT_4))
view(clean_data)
view(clean_data)
CRT_1 <- "CRT_1"
non_numeric_rows <- which(!sapply(clean_data[["CRT_1"]], is.numeric))
if (length(non_numeric_rows) > 0) {
print(paste("Non-numeric values found in column", CRT_1, "at rows:", non_numeric_rows))
} else {
print(paste("ALL values in column", CRT_1, "are numeric"))
}
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
#### Import data
library(readr)
raw_data <- read_csv("~/Library/CloudStorage/OneDrive-Personal/Academics/Stanford/Courses/Fall_2023/PSYCH_251/paxton2012_rescue/data/Pilot_A/Paxton(2012)_Rescue_Pilot_A.csv")
View(Paxton_2012_Rescue_Pilot_A)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(styler)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(lintr)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(qualtRics)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(qualtRics)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(umx)
library(ggthemes)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
install.packages("devtools")
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/qualtRics")
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(umx)
library(ggthemes)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/qualtRics")
install.packages("ggthemes")
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(umx)
library(ggthemes)
library(qualtRics)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/qualtRics")
install.packages("ggthemes")
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(umx)
library(ggthemes)
library(qualtRics)
#### Import data
library(readr)
raw_data <- read_csv("~/Library/CloudStorage/OneDrive-Personal/Academics/Stanford/Courses/Fall_2023/PSYCH_251/paxton2012_rescue/data/Pilot_A/Paxton(2012)_Rescue_Pilot_A.csv")
View(Paxton_2012_Rescue_Pilot_A)
### Data Preparation
install.packages("umx")
#### Load Relevant Libraries and Functions
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/qualtRics")
install.packages("ggthemes")
library(tidyverse)
library(ggplot2)
library(stringr)
library(dplyr)
library(umx)
library(ggthemes)
library(qualtRics)
